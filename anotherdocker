###############################################################################
# 1️⃣  Builder stage – pull everything we need *once* from LocalStack
###############################################################################
FROM localstack/localstack:2.5 AS localstack     # pick a fixed tag for reproducibility

# ── keep only the bits that matter ────────────────────────────────────────────
# • /opt/code/localstack/.venv             – the ready-made virtual-env with all
#                                            Python wheels already installed
# • /usr/local/bin/localstack* & supervisor – lightweight CLI wrappers
# • /var/lib/localstack & /tmp/localstack   – runtime dirs that LS expects
###############################################################################


###############################################################################
# 2️⃣  Final stage – your Rust tool-chain + the copied LocalStack runtime
###############################################################################
FROM rust:1.78-slim-bookworm                    # ✅ requirement fulfilled
LABEL maintainer="you@company.com"

# a *tiny* Python runtime is still needed to start the venv
RUN apt-get update && \
    apt-get install -y --no-install-recommends python3 python3-venv netcat-openbsd && \
    rm -rf /var/lib/apt/lists/*

# ── copy runtime artefacts from the first stage ──────────────────────────────
COPY --from=localstack /opt/code/localstack/.venv          /opt/localstack
COPY --from=localstack /usr/local/bin/localstack*          /usr/local/bin/
COPY --from=localstack /usr/local/bin/localstack-supervisor /usr/local/bin/
COPY --from=localstack /var/lib/localstack                 /var/lib/localstack
COPY --from=localstack /tmp/localstack                     /tmp/localstack

# make the LocalStack venv first on PATH
ENV PATH="/opt/localstack/bin:${PATH}"
# basic LS configuration – keep only what you test against
ENV SERVICES=s3 EAGER_SERVICE_LOADING=1 DNS_ADDRESS=false GATEWAY_SERVER=twisted

WORKDIR /code
COPY . .

# (optional) cache Rust deps
RUN cargo fetch

###############################################################################
# ENTRYPOINT – start LocalStack in the background, then exec whatever command
#              the CI runner gives this container (usually `cargo test`)
###############################################################################
COPY <<'EOS' /usr/local/bin/entrypoint.sh
#!/usr/bin/env bash
set -euo pipefail
# 1. launch LS detached and wait for the edge port
source /opt/localstack/bin/activate
localstack start -d
for _ in {1..90}; do nc -z localhost 4566 && break; sleep 1; done
# 2. hand control to CMD (Ground-Control passes it)
exec "$@"
EOS
RUN chmod +x /usr/local/bin/entrypoint.sh

ENTRYPOINT ["entrypoint.sh"]
CMD ["cargo", "test", "--workspace", "--all-features"]
EXPOSE 4566
